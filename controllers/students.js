import { Console } from "console";
import { readFileSync, writeFileSync } from "fs";
import { Student } from "../models/student.js";

let students = JSON.parse(readFileSync("./data/students.json"));

// CREATE

export const addStudent = async (req, res) => {
  try {
    // TRY AND CREATE A NEW STUDENT
    const student = await Student.create(req.body);
    // RETURN THE AUTOGENERATED ID FROM THE DB
    res.status(201).send({ data: `Student ID: ${student.id} created` });
  } catch (error) {
    // IF THERE IS AN ERROR WE WILL SEND BACK THE MESSAGE
    res.status(403).send(error.message);
  }
};

// READ

export const getStudents = async (req, res) => {
  // COMEBACK TO USING query
  const { name, house } = req.query;
  try {
    const students = await Student.findAll();
    res.send(students);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const getStudentById = async (req, res) => {
  const id = parseInt(req.params.id);
  try {
    const student = await Student.findByPk(id);

    // !student
    if (student === null) {
      throw new Error("Student not found");
    }

    res.send(student);
  } catch (error) {
    res.status(404).send(error.message);
  }
};

// UPDATE

export const updateStudentById = async (req, res) => {
  const id = parseInt(req.params.id);

  try {
    const student = await Student.update(req.body, {
      where: {
        id: id,
      },
    });

    // [1] IF FOUND -> 1 ROW AFFECTED
    // [0] IF NOT FOUND -> 0 ROW AFFECTED
    if (student[0] === 0) {
      throw new Error("Student not found");
    }

    res.send("Student updated");
  } catch (error) {
    res.status(404).send(error.message);
  }
};

export const deleteStudentById = (req, res) => {
  const id = parseInt(req.params.id);
  const hasId = students.some(student => student.id === id);

  if (hasId) {
    const filteredStudents = students.filter(student => student.id !== id);
    students = filteredStudents;
    writeFileSync("./data/students.json", JSON.stringify(filteredStudents, null, 2));
    res.send({ data: filteredStudents });
  } else {
    res.status(404).send("Student not found!");
  }
};
